; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	D:\scottsdocs\sourcecode\OpenGLboxes\code\clock.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??0Clock@@QAE@XZ				; Clock::Clock
PUBLIC	??0Clock@@QAE@ABV0@@Z				; Clock::Clock
PUBLIC	??1Clock@@QAE@XZ				; Clock::~Clock
PUBLIC	?UpdateFrameTimes@Clock@@QAEXXZ			; Clock::UpdateFrameTimes
PUBLIC	?GetTimeSinceStart@Clock@@QAENXZ		; Clock::GetTimeSinceStart
PUBLIC	?GetDeltaFrameTime@Clock@@QAENXZ		; Clock::GetDeltaFrameTime
PUBLIC	?Tick@Clock@@QAEXXZ				; Clock::Tick
PUBLIC	?Tock@Clock@@QAENXZ				; Clock::Tock
PUBLIC	__real@0000000000000000
PUBLIC	__real@412e848000000000
EXTRN	__imp__clock:PROC
EXTRN	__imp___time64:PROC
EXTRN	__imp__srand:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__fltused:DWORD
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+06
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\clock.cpp
;	COMDAT ?Tock@Clock@@QAENXZ
_TEXT	SEGMENT
tv75 = -220						; size = 8
tv72 = -212						; size = 8
_this$ = -8						; size = 4
?Tock@Clock@@QAENXZ PROC				; Clock::Tock, COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   :     return GetTimeSinceStart() - tickTime;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTimeSinceStart@Clock@@QAENXZ	; Clock::GetTimeSinceStart
	fstp	QWORD PTR tv72[ebp]
	movsd	xmm0, QWORD PTR tv72[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	subsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR tv75[ebp], xmm0
	fld	QWORD PTR tv75[ebp]

; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Tock@Clock@@QAENXZ ENDP				; Clock::Tock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\clock.cpp
;	COMDAT ?Tick@Clock@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Tick@Clock@@QAEXXZ PROC				; Clock::Tick, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   :     tickTime = GetTimeSinceStart();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTimeSinceStart@Clock@@QAENXZ	; Clock::GetTimeSinceStart
	mov	eax, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [eax+24]

; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Tick@Clock@@QAEXXZ ENDP				; Clock::Tick
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\clock.cpp
;	COMDAT ?GetDeltaFrameTime@Clock@@QAENXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetDeltaFrameTime@Clock@@QAENXZ PROC			; Clock::GetDeltaFrameTime, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   :     return deltaFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	fld	QWORD PTR [eax+16]

; 45   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDeltaFrameTime@Clock@@QAENXZ ENDP			; Clock::GetDeltaFrameTime
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\clock.cpp
;	COMDAT ?GetTimeSinceStart@Clock@@QAENXZ
_TEXT	SEGMENT
_secondsSinceStart$ = -36				; size = 8
_cyclesSinceStart$ = -20				; size = 4
_this$ = -8						; size = 4
?GetTimeSinceStart@Clock@@QAENXZ PROC			; Clock::GetTimeSinceStart, COMDAT
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   :     clock_t cyclesSinceStart = clock();

	mov	esi, esp
	call	DWORD PTR __imp__clock
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cyclesSinceStart$[ebp], eax

; 36   : 
; 37   :     double secondsSinceStart = (double) cyclesSinceStart / (double) (CLOCKS_PER_SEC * 1000);

	cvtsi2sd xmm0, DWORD PTR _cyclesSinceStart$[ebp]
	divsd	xmm0, QWORD PTR __real@412e848000000000
	movsd	QWORD PTR _secondsSinceStart$[ebp], xmm0

; 38   : 
; 39   :     return secondsSinceStart;

	fld	QWORD PTR _secondsSinceStart$[ebp]

; 40   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTimeSinceStart@Clock@@QAENXZ ENDP			; Clock::GetTimeSinceStart
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\clock.cpp
;	COMDAT ?UpdateFrameTimes@Clock@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?UpdateFrameTimes@Clock@@QAEXXZ PROC			; Clock::UpdateFrameTimes, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 26   :     lastFrameTime = thisFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [ecx+8]
	movsd	QWORD PTR [eax], xmm0

; 27   :     thisFrameTime = GetTimeSinceStart();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTimeSinceStart@Clock@@QAENXZ	; Clock::GetTimeSinceStart
	mov	eax, DWORD PTR _this$[ebp]
	fstp	QWORD PTR [eax+8]

; 28   :     deltaFrameTime = thisFrameTime - lastFrameTime;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR [eax+8]
	subsd	xmm0, QWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movsd	QWORD PTR [edx+16], xmm0

; 29   : 
; 30   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateFrameTimes@Clock@@QAEXXZ ENDP			; Clock::UpdateFrameTimes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\clock.cpp
;	COMDAT ??1Clock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Clock@@QAE@XZ PROC					; Clock::~Clock, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 22   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Clock@@QAE@XZ ENDP					; Clock::~Clock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\clock.cpp
;	COMDAT ??0Clock@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??0Clock@@QAE@ABV0@@Z PROC				; Clock::Clock, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 18   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0Clock@@QAE@ABV0@@Z ENDP				; Clock::Clock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\clock.cpp
;	COMDAT ??0Clock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Clock@@QAE@XZ PROC					; Clock::Clock, COMDAT
; _this$ = ecx

; 12   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 8    : Clock::Clock() : lastFrameTime(0.0f),

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [eax], xmm0

; 9    :     thisFrameTime(0.0f),

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [eax+8], xmm0

; 10   :     deltaFrameTime(0.0f),

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [eax+16], xmm0

; 11   :     tickTime(0.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR __real@0000000000000000
	movsd	QWORD PTR [eax+24], xmm0

; 13   :     srand(time(nullptr));

	push	0
	call	_time
	add	esp, 4
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__srand
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 14   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Clock@@QAE@XZ ENDP					; Clock::Clock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 534  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 535  :             return _time64(_Time);

	mov	esi, esp
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	DWORD PTR __imp___time64
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 536  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
END
