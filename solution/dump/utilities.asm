; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	D:\scottsdocs\sourcecode\twinsouls\code\utilities.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?CatChars@@YAXPADI0I0@Z				; CatChars
PUBLIC	?CharStarSize@@YAIPAD@Z				; CharStarSize
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\twinsouls\code\utilities.cpp
;	COMDAT ?CharStarSize@@YAIPAD@Z
_TEXT	SEGMENT
tv65 = -205						; size = 1
_size$ = -8						; size = 4
_pointer$ = 8						; size = 4
?CharStarSize@@YAIPAD@Z PROC				; CharStarSize, COMDAT

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 21   :     ui32 size = 0;

	mov	DWORD PTR _size$[ebp], 0
$LN2@CharStarSi:

; 22   :     while (*pointer++)

	mov	eax, DWORD PTR _pointer$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv65[ebp], cl
	mov	edx, DWORD PTR _pointer$[ebp]
	add	edx, 1
	mov	DWORD PTR _pointer$[ebp], edx
	movsx	eax, BYTE PTR tv65[ebp]
	test	eax, eax
	je	SHORT $LN3@CharStarSi

; 23   :     {
; 24   :         size++;

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	mov	DWORD PTR _size$[ebp], eax

; 25   :     }

	jmp	SHORT $LN2@CharStarSi
$LN3@CharStarSi:

; 26   :     return size;

	mov	eax, DWORD PTR _size$[ebp]

; 27   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CharStarSize@@YAIPAD@Z ENDP				; CharStarSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\twinsouls\code\utilities.cpp
;	COMDAT ?CatChars@@YAXPADI0I0@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_i$2 = -8						; size = 4
_sourceA$ = 8						; size = 4
_sizeA$ = 12						; size = 4
_sourceB$ = 16						; size = 4
_sizeB$ = 20						; size = 4
_dest$ = 24						; size = 4
?CatChars@@YAXPADI0I0@Z PROC				; CatChars, COMDAT

; 7    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 8    :     for (ui32 i = 0; i < sizeA; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@CatChars
$LN2@CatChars:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@CatChars:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _sizeA$[ebp]
	jae	SHORT $LN3@CatChars

; 9    :     {
; 10   :         *dest++ = *sourceA++;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _sourceA$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 1
	mov	DWORD PTR _dest$[ebp], eax
	mov	ecx, DWORD PTR _sourceA$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sourceA$[ebp], ecx

; 11   :     }

	jmp	SHORT $LN2@CatChars
$LN3@CatChars:

; 12   :     for (ui32 i = 0; i < sizeB; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@CatChars
$LN5@CatChars:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN7@CatChars:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _sizeB$[ebp]
	jae	SHORT $LN6@CatChars

; 13   :     {
; 14   :         *dest++ = *sourceB++;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _sourceB$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 1
	mov	DWORD PTR _dest$[ebp], eax
	mov	ecx, DWORD PTR _sourceB$[ebp]
	add	ecx, 1
	mov	DWORD PTR _sourceB$[ebp], ecx

; 15   :     }

	jmp	SHORT $LN5@CatChars
$LN6@CatChars:

; 16   :     *dest++ = 0;

	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dest$[ebp], ecx

; 17   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CatChars@@YAXPADI0I0@Z ENDP				; CatChars
_TEXT	ENDS
END
