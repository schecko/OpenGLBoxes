; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23506.0 

	TITLE	D:\scottsdocs\sourcecode\OpenGLboxes\code\camera.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	?cos@@YAMM@Z					; cos
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?length@?$tvec4@M$0A@@glm@@QBEHXZ		; glm::tvec4<float,0>::length
PUBLIC	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z			; glm::tvec4<float,0>::operator[]
PUBLIC	??0?$tvec4@M$0A@@glm@@QAE@XZ			; glm::tvec4<float,0>::tvec4<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@XZ			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@ABM@Z			; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z		; glm::tvec3<float,0>::tvec3<float,0>
PUBLIC	??0CameraProperties@@QAE@XZ			; CameraProperties::CameraProperties
PUBLIC	??0Camera@@QAE@XZ				; Camera::Camera
PUBLIC	??1Camera@@QAE@XZ				; Camera::~Camera
PUBLIC	??0Camera@@QAE@U?$tvec3@M$0A@@glm@@0MMMMMM@Z	; Camera::Camera
PUBLIC	?GetViewMatrix@Camera@@QAE?AU?$tmat4x4@M$0A@@glm@@XZ ; Camera::GetViewMatrix
PUBLIC	?MoveCameraPosition@Camera@@QAEXW4Camera_Movement@1@M@Z ; Camera::MoveCameraPosition
PUBLIC	?ChangeViewAngle@Camera@@QAEXMME@Z		; Camera::ChangeViewAngle
PUBLIC	?ChangeZoom@Camera@@QAEXM@Z			; Camera::ChangeZoom
PUBLIC	?UpdateCameraVectors@Camera@@AAEXXZ		; Camera::UpdateCameraVectors
PUBLIC	??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z		; glm::tmat4x4<float,0>::tmat4x4<float,0>
PUBLIC	?length@?$tmat4x4@M$0A@@glm@@QBEHXZ		; glm::tmat4x4<float,0>::length
PUBLIC	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
PUBLIC	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z	; glm::operator+<float,0>
PUBLIC	??$lookAt@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z ; glm::lookAt<float,0>
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
PUBLIC	??$?YM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec3<float,0>::operator+=<float>
PUBLIC	??$?ZM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z	; glm::tvec3<float,0>::operator-=<float>
PUBLIC	??$radians@M@glm@@YAMM@Z			; glm::radians<float>
PUBLIC	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ; glm::normalize<float,0,glm::tvec3>
PUBLIC	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ; glm::cross<float,0>
PUBLIC	??$lookAtRH@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z ; glm::lookAtRH<float,0>
PUBLIC	??$dot@M$0A@Utvec3@glm@@@glm@@YAMABU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
PUBLIC	??$inversesqrt@M@glm@@YAMM@Z			; glm::inversesqrt<float>
PUBLIC	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z	; glm::operator-<float,0>
PUBLIC	?call@?$compute_dot@Utvec3@glm@@M$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0>::call
PUBLIC	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z	; glm::operator*<float,0>
PUBLIC	??$component_count@U?$tvec4@M$0A@@glm@@@detail@glm@@YAHABU?$tvec4@M$0A@@1@@Z ; glm::detail::component_count<glm::tvec4<float,0> >
PUBLIC	??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
PUBLIC	??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
PUBLIC	??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
PUBLIC	??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
PUBLIC	??_C@_1KK@MCDPPLFG@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAi?$AAc?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAd?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?3?$AA?3?$AAc?$AAo@ ; `string'
PUBLIC	??_C@_1JG@OCNLCONN@?$AAd?$AA?3?$AA?2?$AAs?$AAc?$AAo?$AAt?$AAt?$AAs?$AAd?$AAo?$AAc?$AAs?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AAb@ ; `string'
PUBLIC	??_C@_1JK@IKMABNJG@?$AAd?$AA?3?$AA?2?$AAs?$AAc?$AAo?$AAt?$AAt?$AAs?$AAd?$AAo?$AAc?$AAs?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AAb@ ; `string'
PUBLIC	??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f800000
PUBLIC	__real@40400000
PUBLIC	__real@41f00000
PUBLIC	__real@42700000
PUBLIC	__real@42b20000
PUBLIC	__real@447a0000
PUBLIC	__real@461c4000
PUBLIC	__real@c2b20000
PUBLIC	__real@c2b40000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_cos:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	__imp___wassert:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@c2b40000
CONST	SEGMENT
__real@c2b40000 DD 0c2b40000r			; -90
CONST	ENDS
;	COMDAT __real@c2b20000
CONST	SEGMENT
__real@c2b20000 DD 0c2b20000r			; -89
CONST	ENDS
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@42b20000
CONST	SEGMENT
__real@42b20000 DD 042b20000r			; 89
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'i'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JK@IKMABNJG@?$AAd?$AA?3?$AA?2?$AAs?$AAc?$AAo?$AAt?$AAt?$AAs?$AAd?$AAo?$AAc?$AAs?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AAb@
CONST	SEGMENT
??_C@_1JK@IKMABNJG@?$AAd?$AA?3?$AA?2?$AAs?$AAc?$AAo?$AAt?$AAt?$AAs?$AAd?$AAo?$AAc?$AAs?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AAb@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'c', 00H, 'o', 00H, 't', 00H
	DB	't', 00H, 's', 00H, 'd', 00H, 'o', 00H, 'c', 00H, 's', 00H, '\'
	DB	00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'b', 00H, 'o', 00H
	DB	'x', 00H, 'e', 00H, 's', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'p'
	DB	00H, 's', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '_'
	DB	00H, 'm', 00H, 'a', 00H, 't', 00H, '4', 00H, 'x', 00H, '4', 00H
	DB	'.', 00H, 'i', 00H, 'n', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JG@OCNLCONN@?$AAd?$AA?3?$AA?2?$AAs?$AAc?$AAo?$AAt?$AAt?$AAs?$AAd?$AAo?$AAc?$AAs?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AAb@
CONST	SEGMENT
??_C@_1JG@OCNLCONN@?$AAd?$AA?3?$AA?2?$AAs?$AAc?$AAo?$AAt?$AAt?$AAs?$AAd?$AAo?$AAc?$AAs?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AAb@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'c', 00H, 'o', 00H, 't', 00H
	DB	't', 00H, 's', 00H, 'd', 00H, 'o', 00H, 'c', 00H, 's', 00H, '\'
	DB	00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'n', 00H, 'g', 00H, 'l', 00H, 'b', 00H, 'o', 00H
	DB	'x', 00H, 'e', 00H, 's', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'p'
	DB	00H, 's', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'g', 00H, 'l', 00H, 'm'
	DB	00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '_'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, '4', 00H, '.', 00H, 'i', 00H
	DB	'n', 00H, 'l', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@MCDPPLFG@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAi?$AAc?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAd?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?3?$AA?3?$AAc?$AAo@
CONST	SEGMENT
??_C@_1KK@MCDPPLFG@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAi?$AAc?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAd?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?3?$AA?3?$AAc?$AAo@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'c', 00H, '_', 00H, 'c', 00H, 'a', 00H, 's', 00H
	DB	't', 00H, '<', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, ':', 00H, ':', 00H, 'c', 00H, 'o', 00H, 'm', 00H
	DB	'p', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 'n', 00H, 't', 00H, '_'
	DB	00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '_', 00H
	DB	't', 00H, '>', 00H, '(', 00H, 'i', 00H, ')', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, ':', 00H, ':', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p'
	DB	00H, 'o', 00H, 'n', 00H, 'e', 00H, 'n', 00H, 't', 00H, '_', 00H
	DB	'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '(', 00H, '*'
	DB	00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CameraProperties@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>, COMDAT
; _this$ = ecx

; 84   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 81   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 82   : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 83   : 		w(static_cast<T>(d))

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _d$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 84   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec4.inl
;	COMDAT ??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>, COMDAT
; _this$ = ecx

; 84   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 81   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 82   : 		z(static_cast<T>(c)),

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 83   : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 84   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec4.inl
;	COMDAT ??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>, COMDAT
; _this$ = ecx

; 84   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		x(static_cast<T>(a)),

	cvtsi2ss xmm0, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 81   : 		y(static_cast<T>(b)),

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _b$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 82   : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 83   : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 84   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec4.inl
;	COMDAT ??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_d$ = 20						; size = 4
??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z PROC		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>, COMDAT
; _this$ = ecx

; 84   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 		x(static_cast<T>(a)),

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _a$[ebp]
	movss	DWORD PTR [eax], xmm0

; 81   : 		y(static_cast<T>(b)),

	cvtsi2ss xmm0, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 82   : 		z(static_cast<T>(c)),

	cvtsi2ss xmm0, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 83   : 		w(static_cast<T>(d))

	cvtsi2ss xmm0, DWORD PTR _d$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 84   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z ENDP		; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\setup.hpp
;	COMDAT ??$component_count@U?$tvec4@M$0A@@glm@@@detail@glm@@YAHABU?$tvec4@M$0A@@1@@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
??$component_count@U?$tvec4@M$0A@@glm@@@detail@glm@@YAHABU?$tvec4@M$0A@@1@@Z PROC ; glm::detail::component_count<glm::tvec4<float,0> >, COMDAT

; 976  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 977  : #		ifdef GLM_FORCE_SIZE_FUNC
; 978  : 			return m.size();
; 979  : #		else
; 980  : 			return m.length();

	mov	ecx, DWORD PTR _m$[ebp]
	call	?length@?$tvec4@M$0A@@glm@@QBEHXZ	; glm::tvec4<float,0>::length

; 981  : #		endif
; 982  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$component_count@U?$tvec4@M$0A@@glm@@@detail@glm@@YAHABU?$tvec4@M$0A@@1@@Z ENDP ; glm::detail::component_count<glm::tvec4<float,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
$T3 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z PROC	; glm::operator*<float,0>, COMDAT

; 689  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 690  : 		return tvec3<T, P>(

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 691  : 			v1.x * v2.x,
; 692  : 			v1.y * v2.y,
; 693  : 			v1.z * v2.z);
; 694  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\func_geometric.inl
;	COMDAT ?call@?$compute_dot@Utvec3@glm@@M$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z
_TEXT	SEGMENT
tv74 = -220						; size = 4
_tmp$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?call@?$compute_dot@Utvec3@glm@@M$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z PROC ; glm::detail::compute_dot<glm::tvec3,float,0>::call, COMDAT

; 68   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 69   : 			tvec3<T, P> tmp(x * y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp$[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH

; 70   : 			return tmp.x + tmp.y + tmp.z;

	movss	xmm0, DWORD PTR _tmp$[ebp]
	addss	xmm0, DWORD PTR _tmp$[ebp+4]
	addss	xmm0, DWORD PTR _tmp$[ebp+8]
	movss	DWORD PTR tv74[ebp], xmm0
	fld	DWORD PTR tv74[ebp]

; 71   : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@call
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@call:
	DD	1
	DD	$LN4@call
$LN4@call:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@call
$LN3@call:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?call@?$compute_dot@Utvec3@glm@@M$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z ENDP ; glm::detail::compute_dot<glm::tvec3,float,0>::call
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec3.inl
;	COMDAT ??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
$T3 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z PROC	; glm::operator-<float,0>, COMDAT

; 644  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 645  : 		return tvec3<T, P>(

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	subss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	subss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 646  : 			v1.x - v2.x,
; 647  : 			v1.y - v2.y,
; 648  : 			v1.z - v2.z);
; 649  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ENDP	; glm::operator-<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\func_exponential.inl
;	COMDAT ??$inversesqrt@M@glm@@YAMM@Z
_TEXT	SEGMENT
tv76 = -200						; size = 4
tv73 = -196						; size = 4
_x$ = 8							; size = 4
??$inversesqrt@M@glm@@YAMM@Z PROC			; glm::inversesqrt<float>, COMDAT

; 151  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 152  : 		return static_cast<genType>(1) / sqrt(x);

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fstp	DWORD PTR tv73[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]

; 153  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$inversesqrt@M@glm@@YAMM@Z ENDP			; glm::inversesqrt<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\func_geometric.inl
;	COMDAT ??$dot@M$0A@Utvec3@glm@@@glm@@YAMABU?$tvec3@M$0A@@0@0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$dot@M$0A@Utvec3@glm@@@glm@@YAMABU?$tvec3@M$0A@@0@0@Z PROC ; glm::dot<float,0,glm::tvec3>, COMDAT

; 127  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 128  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'dot' only accept floating-point inputs");
; 129  : 		return detail::compute_dot<vecType, T, P>::call(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	?call@?$compute_dot@Utvec3@glm@@M$0A@@detail@glm@@SAMABU?$tvec3@M$0A@@3@0@Z ; glm::detail::compute_dot<glm::tvec3,float,0>::call
	add	esp, 8

; 130  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$dot@M$0A@Utvec3@glm@@@glm@@YAMABU?$tvec3@M$0A@@0@0@Z ENDP ; glm::dot<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\gtc\matrix_transform.inl
;	COMDAT ??$lookAtRH@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z
_TEXT	SEGMENT
tv309 = -388						; size = 4
tv307 = -388						; size = 4
tv311 = -384						; size = 4
tv305 = -384						; size = 4
tv303 = -384						; size = 4
tv301 = -384						; size = 4
tv287 = -384						; size = 4
tv279 = -384						; size = 4
$T1 = -376						; size = 4
$T2 = -364						; size = 12
$T3 = -344						; size = 12
_Result$ = -132						; size = 64
_u$ = -60						; size = 12
_s$ = -40						; size = 12
_f$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_eye$ = 12						; size = 4
_center$ = 16						; size = 4
_up$ = 20						; size = 4
??$lookAtRH@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z PROC ; glm::lookAtRH<float,0>, COMDAT

; 490  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 388				; 00000184H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-388]
	mov	ecx, 97					; 00000061H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 491  : 		tvec3<T, P> const f(normalize(center - eye));

	mov	eax, DWORD PTR _eye$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??$?GM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ; glm::operator-<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _f$[ebp]
	push	eax
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ; glm::normalize<float,0,glm::tvec3>
	add	esp, 8

; 492  : 		tvec3<T, P> const s(normalize(cross(f, up)));

	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ; glm::cross<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ; glm::normalize<float,0,glm::tvec3>
	add	esp, 8

; 493  : 		tvec3<T, P> const u(cross(s, f));

	lea	eax, DWORD PTR _f$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	lea	edx, DWORD PTR _u$[ebp]
	push	edx
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ; glm::cross<float,0>
	add	esp, 12					; 0000000cH

; 494  : 
; 495  : 		tmat4x4<T, P> Result(1);

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z	; glm::tmat4x4<float,0>::tmat4x4<float,0>

; 496  : 		Result[0][0] = s.x;

	push	0
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [eax], xmm0

; 497  : 		Result[1][0] = s.y;

	push	0
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR _s$[ebp+4]
	movss	DWORD PTR [eax], xmm0

; 498  : 		Result[2][0] = s.z;

	push	0
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR _s$[ebp+8]
	movss	DWORD PTR [eax], xmm0

; 499  : 		Result[0][1] = u.x;

	push	1
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR _u$[ebp]
	movss	DWORD PTR [eax], xmm0

; 500  : 		Result[1][1] = u.y;

	push	1
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR _u$[ebp+4]
	movss	DWORD PTR [eax], xmm0

; 501  : 		Result[2][1] = u.z;

	push	1
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR _u$[ebp+8]
	movss	DWORD PTR [eax], xmm0

; 502  : 		Result[0][2] =-f.x;

	movss	xmm0, DWORD PTR _f$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	2
	push	0
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv301[ebp], xmm0
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv301[ebp]
	movss	DWORD PTR [eax], xmm0

; 503  : 		Result[1][2] =-f.y;

	movss	xmm0, DWORD PTR _f$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	2
	push	1
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv303[ebp], xmm0
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv303[ebp]
	movss	DWORD PTR [eax], xmm0

; 504  : 		Result[2][2] =-f.z;

	movss	xmm0, DWORD PTR _f$[ebp+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	2
	push	2
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv305[ebp], xmm0
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv305[ebp]
	movss	DWORD PTR [eax], xmm0

; 505  : 		Result[3][0] =-dot(s, eye);

	mov	eax, DWORD PTR _eye$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMABU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	add	esp, 8
	fstp	DWORD PTR tv279[ebp]
	movss	xmm0, DWORD PTR tv279[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	0
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv307[ebp], xmm0
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv307[ebp]
	movss	DWORD PTR [eax], xmm0

; 506  : 		Result[3][1] =-dot(u, eye);

	mov	eax, DWORD PTR _eye$[ebp]
	push	eax
	lea	ecx, DWORD PTR _u$[ebp]
	push	ecx
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMABU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	add	esp, 8
	fstp	DWORD PTR tv287[ebp]
	movss	xmm0, DWORD PTR tv287[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	1
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	movss	DWORD PTR tv309[ebp], xmm0
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	movss	xmm0, DWORD PTR tv309[ebp]
	movss	DWORD PTR [eax], xmm0

; 507  : 		Result[3][2] = dot(f, eye);

	mov	eax, DWORD PTR _eye$[ebp]
	push	eax
	lea	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMABU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	add	esp, 8
	push	2
	push	3
	lea	ecx, DWORD PTR _Result$[ebp]
	fstp	DWORD PTR tv311[ebp]
	call	??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ; glm::tmat4x4<float,0>::operator[]
	mov	ecx, eax
	call	??A?$tvec4@M$0A@@glm@@QAEAAMH@Z		; glm::tvec4<float,0>::operator[]
	fld	DWORD PTR tv311[ebp]
	fstp	DWORD PTR [eax]

; 508  : 		return Result;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _Result$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 509  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@lookAtRH
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 388				; 00000184H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@lookAtRH:
	DD	4
	DD	$LN7@lookAtRH
$LN7@lookAtRH:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@lookAtRH
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN4@lookAtRH
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN5@lookAtRH
	DD	-132					; ffffff7cH
	DD	64					; 00000040H
	DD	$LN6@lookAtRH
$LN6@lookAtRH:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN5@lookAtRH:
	DB	117					; 00000075H
	DB	0
$LN4@lookAtRH:
	DB	115					; 00000073H
	DB	0
$LN3@lookAtRH:
	DB	102					; 00000066H
	DB	0
??$lookAtRH@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z ENDP ; glm::lookAtRH<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\func_geometric.inl
;	COMDAT ??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
$T3 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z PROC	; glm::cross<float,0>, COMDAT

; 135  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 136  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'cross' only accept floating-point inputs");
; 137  : 
; 138  : 		return tvec3<T, P>(

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+4]
	subss	xmm0, xmm1
	movss	DWORD PTR $T3[ebp], xmm0
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR [ecx]
	subss	xmm0, xmm1
	movss	DWORD PTR $T2[ebp], xmm0
	mov	edx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _x$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR [edx+8]
	subss	xmm0, xmm1
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 139  : 			x.y * y.z - y.y * x.z,
; 140  : 			x.z * y.x - y.z * x.x,
; 141  : 			x.x * y.y - y.x * x.y);
; 142  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ENDP	; glm::cross<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\func_geometric.inl
;	COMDAT ??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z PROC ; glm::normalize<float,0,glm::tvec3>, COMDAT

; 155  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 156  : 		GLM_STATIC_ASSERT(std::numeric_limits<T>::is_iec559, "'normalize' only accept floating-point inputs");
; 157  : 
; 158  : 		return x * inversesqrt(dot(x, x));

	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	??$dot@M$0A@Utvec3@glm@@@glm@@YAMABU?$tvec3@M$0A@@0@0@Z ; glm::dot<float,0,glm::tvec3>
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	??$inversesqrt@M@glm@@YAMM@Z		; glm::inversesqrt<float>
	add	esp, 4
	fstp	DWORD PTR $T1[ebp]
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 159  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ENDP ; glm::normalize<float,0,glm::tvec3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\func_trigonometric.inl
;	COMDAT ??$radians@M@glm@@YAMM@Z
_TEXT	SEGMENT
tv67 = -196						; size = 4
_degrees$ = 8						; size = 4
??$radians@M@glm@@YAMM@Z PROC				; glm::radians<float>, COMDAT

; 42   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 43   : 		GLM_STATIC_ASSERT(std::numeric_limits<genType>::is_iec559, "'radians' only accept floating-point input");
; 44   : 
; 45   : 		return degrees * static_cast<genType>(0.01745329251994329576923690768489);

	movss	xmm0, DWORD PTR _degrees$[ebp]
	mulss	xmm0, DWORD PTR __real@3c8efa35
	movss	DWORD PTR tv67[ebp], xmm0
	fld	DWORD PTR tv67[ebp]

; 46   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$radians@M@glm@@YAMM@Z ENDP				; glm::radians<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec3.inl
;	COMDAT ??$?ZM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??$?ZM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC	; glm::tvec3<float,0>::operator-=<float>, COMDAT
; _this$ = ecx

; 263  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 264  : 		this->x -= static_cast<T>(v.x);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 265  : 		this->y -= static_cast<T>(v.y);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 266  : 		this->z -= static_cast<T>(v.z);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	subss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 267  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 268  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?ZM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP	; glm::tvec3<float,0>::operator-=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec3.inl
;	COMDAT ??$?YM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??$?YM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z PROC	; glm::tvec3<float,0>::operator+=<float>, COMDAT
; _this$ = ecx

; 233  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  : 		this->x += static_cast<T>(v.x);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 235  : 		this->y += static_cast<T>(v.y);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 236  : 		this->z += static_cast<T>(v.z);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 237  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 238  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?YM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z ENDP	; glm::tvec3<float,0>::operator+=<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec3.inl
;	COMDAT ??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@ABM@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
$T3 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_scalar$ = 16						; size = 4
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@ABM@Z PROC	; glm::operator*<float,0>, COMDAT

; 653  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 654  : 		return tvec3<T, P>(

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _scalar$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _scalar$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _scalar$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 655  : 			v.x * scalar,
; 656  : 			v.y * scalar,
; 657  : 			v.z * scalar);
; 658  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@ABM@Z ENDP	; glm::operator*<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\gtc\matrix_transform.inl
;	COMDAT ??$lookAt@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_eye$ = 12						; size = 4
_center$ = 16						; size = 4
_up$ = 20						; size = 4
??$lookAt@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z PROC ; glm::lookAt<float,0>, COMDAT

; 475  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 476  : 		#ifdef GLM_LEFT_HANDED
; 477  : 			return lookAtLH(eye, center, up);
; 478  : 		#else
; 479  : 			return lookAtRH(eye, center, up);

	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	mov	ecx, DWORD PTR _center$[ebp]
	push	ecx
	mov	edx, DWORD PTR _eye$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??$lookAtRH@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z ; glm::lookAtRH<float,0>
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 480  : 		#endif
; 481  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$lookAt@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z ENDP ; glm::lookAt<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec3.inl
;	COMDAT ??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
$T3 = -200						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z PROC	; glm::operator+<float,0>, COMDAT

; 599  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 600  : 		return tvec3<T, P>(

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	addss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR $T3[ebp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR $T2[ebp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z	; glm::tvec3<float,0>::tvec3<float,0>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 601  : 			v1.x + v2.x,
; 602  : 			v1.y + v2.y,
; 603  : 			v1.z + v2.z);
; 604  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ENDP	; glm::operator+<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_mat4x4.inl
;	COMDAT ??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z PROC	; glm::tmat4x4<float,0>::operator[], COMDAT
; _this$ = ecx

; 355  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 356  : 			assert(i < this->length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@?$tmat4x4@M$0A@@glm@@QBEHXZ	; glm::tmat4x4<float,0>::length
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN3@operator
	mov	esi, esp
	push	356					; 00000164H
	push	OFFSET ??_C@_1JK@IKMABNJG@?$AAd?$AA?3?$AA?2?$AAs?$AAc?$AAo?$AAt?$AAt?$AAs?$AAd?$AAo?$AAc?$AAs?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AAb@
	push	OFFSET ??_C@_1CG@KOFHLCJL@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAt?$AAh?$AAi?$AAs?$AA?9?$AA?$DO?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@operator:

; 357  : 			return this->value[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]

; 358  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$tmat4x4@M$0A@@glm@@QAEAAU?$tvec4@M$0A@@1@H@Z ENDP	; glm::tmat4x4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_mat4x4.inl
;	COMDAT ?length@?$tmat4x4@M$0A@@glm@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@?$tmat4x4@M$0A@@glm@@QBEHXZ PROC		; glm::tmat4x4<float,0>::length, COMDAT
; _this$ = ecx

; 349  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 			return 4;

	mov	eax, 4

; 351  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$tmat4x4@M$0A@@glm@@QBEHXZ ENDP		; glm::tmat4x4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_mat4x4.inl
;	COMDAT ??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z
_TEXT	SEGMENT
$T1 = -296						; size = 16
$T2 = -272						; size = 16
$T3 = -248						; size = 16
$T4 = -224						; size = 16
_this$ = -8						; size = 4
_s$ = 8							; size = 4
??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z PROC			; glm::tmat4x4<float,0>::tmat4x4<float,0>, COMDAT
; _this$ = ecx

; 137  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0?$tvec4@M$0A@@glm@@QAE@XZ	; glm::tvec4<float,0>::tvec4<float,0>
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIIP6EPAX0@Z@Z

; 138  : 		this->value[0] = col_type(s, 0, 0, 0);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??$?0MHHH@?$tvec4@M$0A@@glm@@QAE@MHHH@Z	; glm::tvec4<float,0>::tvec4<float,0><float,int,int,int>
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 0
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 139  : 		this->value[1] = col_type(0, s, 0, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??$?0HMHH@?$tvec4@M$0A@@glm@@QAE@HMHH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,float,int,int>
	mov	ecx, 16					; 00000010H
	shl	ecx, 0
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 140  : 		this->value[2] = col_type(0, 0, s, 0);

	push	0
	mov	eax, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0HHMH@?$tvec4@M$0A@@glm@@QAE@HHMH@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,float,int>
	mov	ecx, 16					; 00000010H
	shl	ecx, 1
	add	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 141  : 		this->value[3] = col_type(0, 0, 0, s);

	mov	eax, DWORD PTR _s$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??$?0HHHM@?$tvec4@M$0A@@glm@@QAE@HHHM@Z	; glm::tvec4<float,0>::tvec4<float,0><int,int,int,float>
	mov	ecx, 16					; 00000010H
	imul	edx, ecx, 3
	add	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax

; 142  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tmat4x4@M$0A@@glm@@QAE@ABM@Z ENDP			; glm::tmat4x4<float,0>::tmat4x4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ?UpdateCameraVectors@Camera@@AAEXXZ
_TEXT	SEGMENT
tv218 = -340						; size = 4
tv187 = -340						; size = 4
tv271 = -336						; size = 4
tv269 = -336						; size = 4
tv207 = -332						; size = 4
tv176 = -332						; size = 4
$T1 = -324						; size = 12
$T2 = -304						; size = 12
$T3 = -284						; size = 12
$T4 = -264						; size = 12
$T5 = -244						; size = 12
_tempFront$ = -32					; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?UpdateCameraVectors@Camera@@AAEXXZ PROC		; Camera::UpdateCameraVectors, COMDAT
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 85					; 00000055H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 101  :     glm::vec3 tempFront;

	lea	ecx, DWORD PTR _tempFront$[ebp]
	call	??0?$tvec3@M$0A@@glm@@QAE@XZ		; glm::tvec3<float,0>::tvec3<float,0>

; 102  :     tempFront.x = cos(glm::radians(this->cameraProperties.yaw)) * cos(glm::radians(this->cameraProperties.pitch));

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+60]
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv176[ebp]
	movss	xmm0, DWORD PTR tv176[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [ecx+64]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv269[ebp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv187[ebp]
	movss	xmm0, DWORD PTR tv269[ebp]
	mulss	xmm0, DWORD PTR tv187[ebp]
	movss	DWORD PTR _tempFront$[ebp], xmm0

; 103  :     tempFront.y = sin(glm::radians(this->cameraProperties.pitch));

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+64]
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR _tempFront$[ebp+4]

; 104  :     tempFront.z = sin(glm::radians(this->cameraProperties.yaw)) * cos(glm::radians(this->cameraProperties.pitch));

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+60]
	movss	DWORD PTR [esp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv207[ebp]
	movss	xmm0, DWORD PTR tv207[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm1, DWORD PTR [ecx+64]
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv271[ebp], xmm0
	call	??$radians@M@glm@@YAMM@Z		; glm::radians<float>
	fstp	DWORD PTR [esp]
	call	?cos@@YAMM@Z				; cos
	add	esp, 4
	fstp	DWORD PTR tv218[ebp]
	movss	xmm0, DWORD PTR tv271[ebp]
	mulss	xmm0, DWORD PTR tv218[ebp]
	movss	DWORD PTR _tempFront$[ebp+8], xmm0

; 105  : 
; 106  :     this->cameraProperties.front = glm::normalize(tempFront);

	lea	eax, DWORD PTR _tempFront$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ; glm::normalize<float,0,glm::tvec3>
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax

; 107  : 
; 108  :     this->cameraProperties.right = glm::normalize(glm::cross(this->cameraProperties.front, this->cameraProperties.worldUp));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ; glm::cross<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ; glm::normalize<float,0,glm::tvec3>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 109  :     this->cameraProperties.up = glm::normalize(glm::cross(this->cameraProperties.right, this->cameraProperties.front));

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??$cross@M$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ; glm::cross<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$normalize@M$0A@Utvec3@glm@@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@@Z ; glm::normalize<float,0,glm::tvec3>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 110  : 
; 111  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@UpdateCame
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@UpdateCame:
	DD	1
	DD	$LN4@UpdateCame
$LN4@UpdateCame:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN3@UpdateCame
$LN3@UpdateCame:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?UpdateCameraVectors@Camera@@AAEXXZ ENDP		; Camera::UpdateCameraVectors
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ?ChangeZoom@Camera@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_yOffset$ = 8						; size = 4
?ChangeZoom@Camera@@QAEXM@Z PROC			; Camera::ChangeZoom, COMDAT
; _this$ = ecx

; 81   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 82   : 
; 83   :     if (this->cameraProperties.zoom >= DEFZOOMMIN && this->cameraProperties.zoom <= DEFZOOMMAX)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+68]
	comiss	xmm0, DWORD PTR __real@41f00000
	jb	SHORT $LN2@ChangeZoom
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	comiss	xmm0, DWORD PTR [eax+68]
	jb	SHORT $LN2@ChangeZoom

; 84   :     {
; 85   :         this->cameraProperties.zoom += yOffset * this->cameraProperties.zoomSensitivity;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	mulss	xmm0, DWORD PTR [eax+80]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+68]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+68], xmm0
$LN2@ChangeZoom:

; 86   :     }
; 87   :     if (this->cameraProperties.zoom <= DEFZOOMMIN)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41f00000
	comiss	xmm0, DWORD PTR [eax+68]
	jb	SHORT $LN3@ChangeZoom

; 88   :     {
; 89   :         this->cameraProperties.zoom = DEFZOOMMIN;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [eax+68], xmm0
$LN3@ChangeZoom:

; 90   :     }
; 91   :     if (this->cameraProperties.zoom >= DEFZOOMMAX)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+68]
	comiss	xmm0, DWORD PTR __real@42700000
	jb	SHORT $LN4@ChangeZoom

; 92   :     {
; 93   :         this->cameraProperties.zoom = DEFZOOMMAX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42700000
	movss	DWORD PTR [eax+68], xmm0
$LN4@ChangeZoom:

; 94   :     }
; 95   :     //std::cout << cameraProperties.zoom << std::endl;
; 96   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ChangeZoom@Camera@@QAEXM@Z ENDP			; Camera::ChangeZoom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ?ChangeViewAngle@Camera@@QAEXMME@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xOffset$ = 8						; size = 4
_yOffset$ = 12						; size = 4
_constrainPitch$ = 16					; size = 1
?ChangeViewAngle@Camera@@QAEXMME@Z PROC			; Camera::ChangeViewAngle, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   :     xOffset *= this->cameraProperties.angleSensitivity;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xOffset$[ebp]
	mulss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _xOffset$[ebp], xmm0

; 61   :     yOffset *= this->cameraProperties.angleSensitivity;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yOffset$[ebp]
	mulss	xmm0, DWORD PTR [eax+76]
	movss	DWORD PTR _yOffset$[ebp], xmm0

; 62   : 
; 63   :     this->cameraProperties.yaw += xOffset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+60]
	addss	xmm0, DWORD PTR _xOffset$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+60], xmm0

; 64   :     this->cameraProperties.pitch += yOffset;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	addss	xmm0, DWORD PTR _yOffset$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+64], xmm0

; 65   : 
; 66   :     if (constrainPitch)

	movzx	eax, BYTE PTR _constrainPitch$[ebp]
	test	eax, eax
	je	SHORT $LN4@ChangeView

; 67   :     {
; 68   :         if (this->cameraProperties.pitch > 89.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+64]
	comiss	xmm0, DWORD PTR __real@42b20000
	jbe	SHORT $LN3@ChangeView

; 69   :         {
; 70   :             this->cameraProperties.pitch = 89.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@42b20000
	movss	DWORD PTR [eax+64], xmm0
$LN3@ChangeView:

; 71   :         }
; 72   :         if (this->cameraProperties.pitch < -89.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c2b20000
	comiss	xmm0, DWORD PTR [eax+64]
	jbe	SHORT $LN4@ChangeView

; 73   :         {
; 74   :             this->cameraProperties.pitch = -89.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c2b20000
	movss	DWORD PTR [eax+64], xmm0
$LN4@ChangeView:

; 75   :         }
; 76   :     }
; 77   :     UpdateCameraVectors();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateCameraVectors@Camera@@AAEXXZ	; Camera::UpdateCameraVectors

; 78   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ChangeViewAngle@Camera@@QAEXMME@Z ENDP			; Camera::ChangeViewAngle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ?MoveCameraPosition@Camera@@QAEXW4Camera_Movement@1@M@Z
_TEXT	SEGMENT
$T1 = -296						; size = 12
$T2 = -276						; size = 12
$T3 = -256						; size = 12
$T4 = -236						; size = 12
_velocity$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_direction$ = 8						; size = 4
_dt$ = 12						; size = 4
?MoveCameraPosition@Camera@@QAEXW4Camera_Movement@1@M@Z PROC ; Camera::MoveCameraPosition, COMDAT
; _this$ = ecx

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 
; 45   :     GLfloat velocity = this->cameraProperties.translationSpeed * dt;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+72]
	mulss	xmm0, DWORD PTR _dt$[ebp]
	movss	DWORD PTR _velocity$[ebp], xmm0

; 46   :     if (direction == FORWARD)

	cmp	DWORD PTR _direction$[ebp], 0
	jne	SHORT $LN2@MoveCamera

; 47   :         this->cameraProperties.position += this->cameraProperties.front * velocity;

	lea	eax, DWORD PTR _velocity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?YM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z ; glm::tvec3<float,0>::operator+=<float>
$LN2@MoveCamera:

; 48   :     if (direction == BACKWARD)

	cmp	DWORD PTR _direction$[ebp], 1
	jne	SHORT $LN3@MoveCamera

; 49   :         this->cameraProperties.position -= this->cameraProperties.front * velocity;

	lea	eax, DWORD PTR _velocity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?ZM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z ; glm::tvec3<float,0>::operator-=<float>
$LN3@MoveCamera:

; 50   :     if (direction == LEFT)

	cmp	DWORD PTR _direction$[ebp], 2
	jne	SHORT $LN4@MoveCamera

; 51   :         this->cameraProperties.position -= this->cameraProperties.right * velocity;

	lea	eax, DWORD PTR _velocity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?ZM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z ; glm::tvec3<float,0>::operator-=<float>
$LN4@MoveCamera:

; 52   :     if (direction == RIGHT)

	cmp	DWORD PTR _direction$[ebp], 3
	jne	SHORT $LN5@MoveCamera

; 53   :         this->cameraProperties.position += this->cameraProperties.right * velocity;

	lea	eax, DWORD PTR _velocity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$?DM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@ABM@Z ; glm::operator*<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?YM@?$tvec3@M$0A@@glm@@QAEAAU01@ABU01@@Z ; glm::tvec3<float,0>::operator+=<float>
$LN5@MoveCamera:

; 54   : 
; 55   :     UpdateCameraVectors();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateCameraVectors@Camera@@AAEXXZ	; Camera::UpdateCameraVectors

; 56   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@MoveCamera
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@MoveCamera:
	DD	1
	DD	$LN8@MoveCamera
$LN8@MoveCamera:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN7@MoveCamera
$LN7@MoveCamera:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
?MoveCameraPosition@Camera@@QAEXW4Camera_Movement@1@M@Z ENDP ; Camera::MoveCameraPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ?GetViewMatrix@Camera@@QAE?AU?$tmat4x4@M$0A@@glm@@XZ
_TEXT	SEGMENT
$T1 = -220						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetViewMatrix@Camera@@QAE?AU?$tmat4x4@M$0A@@glm@@XZ PROC ; Camera::GetViewMatrix, COMDAT
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   :     return glm::lookAt(this->cameraProperties.position, this->cameraProperties.position + this->cameraProperties.front, this->cameraProperties.up);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??$?HM$0A@@glm@@YA?AU?$tvec3@M$0A@@0@ABU10@0@Z ; glm::operator+<float,0>
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??$lookAt@M$0A@@glm@@YA?AU?$tmat4x4@M$0A@@0@ABU?$tvec3@M$0A@@0@00@Z ; glm::lookAt<float,0>
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 40   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetViewMatrix@Camera@@QAE?AU?$tmat4x4@M$0A@@glm@@XZ ENDP ; Camera::GetViewMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ??0Camera@@QAE@U?$tvec3@M$0A@@glm@@0MMMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 12
_worldUp$ = 20						; size = 12
_yaw$ = 32						; size = 4
_pitch$ = 36						; size = 4
_zoom$ = 40						; size = 4
_translationSpeed$ = 44					; size = 4
_angleSensitvity$ = 48					; size = 4
_zoomSensivity$ = 52					; size = 4
??0Camera@@QAE@U?$tvec3@M$0A@@glm@@0MMMMMM@Z PROC	; Camera::Camera, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CameraProperties@@QAE@XZ

; 19   :     this->cameraProperties.position = position;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _position$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _position$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 20   :     this->cameraProperties.worldUp = worldUp;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _worldUp$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _worldUp$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _worldUp$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 21   :     this->cameraProperties.yaw = yaw;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yaw$[ebp]
	movss	DWORD PTR [eax+60], xmm0

; 22   :     this->cameraProperties.pitch = pitch;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _pitch$[ebp]
	movss	DWORD PTR [eax+64], xmm0

; 23   :     this->cameraProperties.zoom = zoom;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _zoom$[ebp]
	movss	DWORD PTR [eax+68], xmm0

; 24   :     this->cameraProperties.translationSpeed = DEFTRANSLATIONSPEED;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR [eax+72], xmm0

; 25   :     this->cameraProperties.angleSensitivity = DEFANGLESENSITIVITY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR [eax+76], xmm0

; 26   :     this->cameraProperties.zoomSensitivity = DEFZOOMSENSITIVITY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR [eax+80], xmm0

; 27   : 
; 28   :     this->UpdateCameraVectors();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateCameraVectors@Camera@@AAEXXZ	; Camera::UpdateCameraVectors

; 29   : 
; 30   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
??0Camera@@QAE@U?$tvec3@M$0A@@glm@@0MMMMMM@Z ENDP	; Camera::Camera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ??1Camera@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Camera@@QAE@XZ PROC					; Camera::~Camera, COMDAT
; _this$ = ecx

; 7    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 8    : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Camera@@QAE@XZ ENDP					; Camera::~Camera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ??0Camera@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Camera@@QAE@XZ PROC					; Camera::Camera, COMDAT
; _this$ = ecx

; 33   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CameraProperties@@QAE@XZ

; 34   :     this->UpdateCameraVectors();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateCameraVectors@Camera@@AAEXXZ	; Camera::UpdateCameraVectors

; 35   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Camera@@QAE@XZ ENDP					; Camera::Camera
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0CameraProperties@@QAE@XZ
_TEXT	SEGMENT
$T2 = -296						; size = 4
$T3 = -284						; size = 4
$T4 = -272						; size = 4
$T5 = -260						; size = 4
$T6 = -248						; size = 4
$T7 = -236						; size = 4
$T8 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CameraProperties@@QAE@XZ PROC			; CameraProperties::CameraProperties, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CameraProperties@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $T8[ebp], xmm0
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $T7[ebp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $T6[ebp], xmm0
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $T5[ebp], xmm0
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z	; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $T4[ebp], xmm0
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $T3[ebp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM@Z		; glm::tvec3<float,0>::tvec3<float,0>
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $T2[ebp], xmm0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0?$tvec3@M$0A@@glm@@QAE@ABM@Z		; glm::tvec3<float,0>::tvec3<float,0>
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@c2b40000
	movss	DWORD PTR [eax+60], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+64], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@41f00000
	movss	DWORD PTR [eax+68], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@461c4000
	movss	DWORD PTR [eax+72], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR [eax+76], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@447a0000
	movss	DWORD PTR [eax+80], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0CameraProperties@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CameraProperties@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CameraProperties@@QAE@XZ ENDP			; CameraProperties::CameraProperties
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 73   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 		: x(a), y(b), z(c)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 73   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0?$tvec3@M$0A@@glm@@QAE@ABM00@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@ABM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scalar$ = 8						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@ABM@Z PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 68   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 67   : 		: x(scalar), y(scalar), z(scalar)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scalar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scalar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scalar$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 68   : 	{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tvec3@M$0A@@glm@@QAE@ABM@Z ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec3.inl
;	COMDAT ??0?$tvec3@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$tvec3@M$0A@@glm@@QAE@XZ PROC			; glm::tvec3<float,0>::tvec3<float,0>, COMDAT
; _this$ = ecx

; 43   : 		{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 				: x(0), y(0), z(0)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 43   : 		{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tvec3@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec3<float,0>::tvec3<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec4.inl
;	COMDAT ??0?$tvec4@M$0A@@glm@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$tvec4@M$0A@@glm@@QAE@XZ PROC			; glm::tvec4<float,0>::tvec4<float,0>, COMDAT
; _this$ = ecx

; 43   : 		{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 41   : 				: x(0), y(0), z(0), w(0)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 43   : 		{}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$tvec4@M$0A@@glm@@QAE@XZ ENDP			; glm::tvec4<float,0>::tvec4<float,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec4.inl
;	COMDAT ??A?$tvec4@M$0A@@glm@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$tvec4@M$0A@@glm@@QAEAAMH@Z PROC			; glm::tvec4<float,0>::operator[], COMDAT
; _this$ = ecx

; 236  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 237  : 			assert(i >= 0 && static_cast<detail::component_count_t>(i) < detail::component_count(*this));

	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$component_count@U?$tvec4@M$0A@@glm@@@detail@glm@@YAHABU?$tvec4@M$0A@@1@@Z ; glm::detail::component_count<glm::tvec4<float,0> >
	add	esp, 4
	cmp	DWORD PTR _i$[ebp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	esi, esp
	push	237					; 000000edH
	push	OFFSET ??_C@_1JG@OCNLCONN@?$AAd?$AA?3?$AA?2?$AAs?$AAc?$AAo?$AAt?$AAt?$AAs?$AAd?$AAo?$AAc?$AAs?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?2?$AAo?$AAp?$AAe?$AAn?$AAg?$AAl?$AAb@
	push	OFFSET ??_C@_1KK@MCDPPLFG@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAi?$AAc?$AA_?$AAc?$AAa?$AAs?$AAt?$AA?$DM?$AAd?$AAe?$AAt?$AAa?$AAi?$AAl?$AA?3?$AA?3?$AAc?$AAo@
	call	DWORD PTR __imp___wassert
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@operator:

; 238  : 			return (&x)[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 239  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$tvec4@M$0A@@glm@@QAEAAMH@Z ENDP			; glm::tvec4<float,0>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\deps\include\glm\detail\type_vec4.inl
;	COMDAT ?length@?$tvec4@M$0A@@glm@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@?$tvec4@M$0A@@glm@@QBEHXZ PROC			; glm::tvec4<float,0>::length, COMDAT
; _this$ = ecx

; 230  : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 231  : 			return 4;

	mov	eax, 4

; 232  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$tvec4@M$0A@@glm@@QBEHXZ ENDP			; glm::tvec4<float,0>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\appdata\vsp\vc\include\cmath
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 316  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 317  : 	return (_CSTD sqrtf(_Xx));

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4

; 318  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\appdata\vsp\vc\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 306  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 307  : 	return (_CSTD sinf(_Xx));

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4

; 308  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\appdata\vsp\vc\include\cmath
;	COMDAT ?cos@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?cos@@YAMM@Z PROC					; cos, COMDAT

; 102  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 103  : 	return (_CSTD cosf(_Xx));

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4

; 104  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cos@@YAMM@Z ENDP					; cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 745  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 746  :         return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 747  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 735  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 736  :         return (float)sin(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 737  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 634  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 635  :         return (float)cos(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 636  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\scottsdocs\sourcecode\openglboxes\code\camera.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv67 = -200						; size = 4
tv66 = -196						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR ___n$[ebp]
	sub	ecx, 1
	mov	DWORD PTR ___n$[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[ebp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[ebp], 0
	je	SHORT $LN1@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN1@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
